#!/usr/bin/python
#Python imports
import subprocess
import sys
#django Imports
from django.template import RequestContext
#from django.contrib.auth.models import User
#from django.contrib.auth.decorators import login_required
from django.core.urlresolvers import reverse
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.views.generic.list_detail import object_detail, object_list
from django.db.models.query import QuerySet
#My imports
import my_apps.forms as forms

#Prefix to location of executables
prefix='/Users/bdaudert/DRI/AcisWS_WRCC_PythonScriptsi/'

def home_view(request):
	context = {
	'title': 'DATA APPLICATIONS',
	}
	return render_to_response('my_apps/home.html', context, context_instance=RequestContext(request))

def app(request, app_name):
	#app_name = request.GET.get('app_name')
	context = {
	'title': '%s' % app_name,
	}
	if app_name is None:
		raise
	params = {} #stores commandline options of the python app
	form = set_as_form(request, app_name)
	if form.is_valid():
		if app_name == 'Sodrun':
			program = 'sodlist.py'
			params['--coop-station-id'] = form.cleaned_data('coop_station_id')
			params['--start-date'] = form.cleaned_data('start_date')
			params['--end-date'] = form.cleaned_data('end_date')
			params['--element'] = form.cleaned_data('element')
			params['--threshold'] = form.cleaned_data('threshold')
			params['--aeb'] = form.cleaned_data('aeb')
			params['--min-run'] = form.cleaned_data('min-run')
			params['--name'] = form.cleaned_data('name', None)
			params['--output-file'] = form.cleaned_data('output_file', None)
			params['--verbose'] = form.cleaned_data('verbose', False)
	else:
		program = ' '
		executable = 'print \'Hello\''
	executable = prefix + program
	in_put = ''
	for key, val in params.iteritems():
		if isinstance(val, int):
			in_put+='%s %i' % (key, val)
		else:
			in_put+='%s %s' % (key, val)

	proc = subprocess.Popen(executable,
				shell=True,
				stdin=subprocess.PIPE,
				stdout=subprocess.PIPE,
				)
	output = proc.communicate(input=in_put)[0]

	context['app_name'] = app_name
	context['form'] = form
	context['params'] = params
	context['output'] = output
	return render_to_response('my_apps/application.html', context, context_instance=RequestContext(request))


#Utlities
def set_as_form(request, app_name, init = None):
	form_name = '%sForm' % app_name
	form_class = getattr(forms, form_name)
	if request.POST:
		form = form_class(request.POST)
	else:
		if init is not None:
			form = form_class(initial=init)
		else:
			form = form_class(initial={'app_name': app_name})
	return form
